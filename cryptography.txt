LPIC 303 用語説明: 暗号化

[5] X.509証明書と公開鍵基盤

Q. Let’s Encrypt
A.
```
「Let's Encrypt」は、無料でSSL/TLS証明書を提供する公開鍵基盤（PKI）です。SSL/TLS証明書は、ウェブサイトやアプリケーションなどの通信を暗号化し、セキュアな通信を確保するために使用されます。Let's Encryptは、2015年に非営利団体である「Internet Security Research Group（ISRG）」によって提供されており、セキュアなウェブ通信を促進するために設立されました。

Let's Encryptが特に注目される点は、以下の特徴です：

1. **無料証明書の提供**: Let's Encryptは、その名前の通り、無料で証明書を提供しています。これにより、ウェブサイトやアプリケーションの運営者が手軽にHTTPS（暗号化通信）を導入することが可能になりました。

2. **自動化**: Let's Encryptは自動化を強調しています。証明書の取得や更新を自動的に行うことができ、手作業による手間を最小限に抑えることができます。ACME（Automatic Certificate Management Environment）プロトコルを使用して、自動的に証明書の発行や更新を行います。

3. **広く受け入れられている**: Let's Encryptの証明書は、主要なウェブブラウザやプラットフォームによって信頼されており、一般的なSSL証明書と同様に適切なセキュリティを提供します。

4. **オープンソース**: Let's Encryptのクライアントソフトウェアはオープンソースで公開されており、各種プラットフォームで利用可能です。これにより、コミュニティの協力によって継続的に改善されています。

Let's Encryptを利用することで、ウェブサイトやアプリケーションのセキュリティを向上させ、ユーザーのプライバシーやデータの保護を強化することができます。
```

Q. ACME
A.
```
ACME（Automatic Certificate Management Environment）は、SSL/TLS証明書の自動的な発行、更新、および管理を行うためのプロトコルです。ACMEプロトコルは、Let's Encryptという公開鍵基盤が提供する証明書を取得・管理するために使用されていますが、ACMEプロトコル自体は特定のプロバイダーに依存せず、広く使用されることができます。

ACMEプロトコルの特徴は以下の通りです：

1. **自動化**: ACMEは証明書の発行や更新を自動的に行うためのプロトコルです。これにより、証明書の有効期限切れや更新の手作業管理が不要となります。

2. **挑戦と応答方式**: ACMEプロトコルは、ドメインの所有権を確認するために、クライアントとサーバー間で「挑戦」と「応答」を行います。例えば、DNS-01チャレンジでは、特定のDNSレコードを作成することでドメインの所有権を証明します。

3. **APIを介した通信**: ACMEプロトコルはAPIを使用してクライアントとサーバーが通信する仕組みです。クライアントはACMEサーバーにリクエストを送信し、証明書の取得や更新を行います。

4. **証明書の種類**: ACMEプロトコルは通常SSL/TLS証明書の取得に使用されますが、証明書の種類は広範で、例えばワイルドカード証明書やマルチドメイン証明書も取得できます。

5. **セキュリティとプライバシー**: ACMEプロトコルは、安全な通信とプライバシーの保護を重視して設計されています。挑戦と応答方式により、ドメインの所有権を検証するプロセスがセキュリティを確保します。

ACMEプロトコルの主な目的は、証明書の管理を簡素化し、セキュアな通信を推進することです。Let's Encryptを含む多くの証明書発行プロバイダーがACMEプロトコルに対応しており、広く利用されています。
```

Q.Certbot
A.
```
Certbot（以前は「letsencrypt-auto」）は、SSL/TLS証明書の取得、更新、および管理を簡単かつ自動化するためのオープンソースのツールです。CertbotはLet's Encryptと連携して、ACMEプロトコルを使用して証明書を自動的に取得および更新します。

Certbotの主な特徴と機能は以下の通りです：

1. **自動化**: Certbotは証明書の取得や更新を自動化するためのツールです。設定が行われると、Certbotは定期的に証明書の更新をチェックし、有効期限が切れる前に自動的に新しい証明書を取得します。

2. **設定の簡素化**: Certbotは証明書の設定を簡単に行うことができます。コマンドラインツールまたはウェブサーバーとのインテグレーションを使用して、証明書の取得や更新を容易に行えます。

3. **多様なプラットフォームへの対応**: CertbotはLinuxやmacOSなどの多くのプラットフォームに対応しています。さまざまなウェブサーバー（Apache、Nginxなど）で動作するため、広範な環境で利用可能です。

4. **DNS認証**: Certbotは、DNS-01チャレンジを使用してドメインの所有権を確認するためのDNS認証をサポートしています。これにより、ウェブサーバーへのアクセスが難しい環境でも証明書を取得できます。

5. **拡張機能**: Certbotは拡張可能な仕組みを提供しており、新しい機能やプラグインを追加することが可能です。これにより、特定の環境や要件に合わせてカスタマイズすることができます。

CertbotはLet's Encryptプロジェクトによって開発されており、無料で利用できるLet's Encrypt証明書を取得するための重要なツールの一つです。セキュアな通信を提供するために、Certbotを使用して証明書の取得や更新を自動化することが広く推奨されています。
```

Q. CFSSL
A.
```
CFSSL（CloudFlare's PKI/TLS toolkit）は、CloudFlareが開発したオープンソースのPKI（Public Key Infrastructure）およびTLS（Transport Layer Security）ツールキットです。CFSSLは証明書の生成、署名、管理、および配布などのタスクを支援し、セキュアな通信のための証明書基盤を構築するのに役立ちます。

CFSSLの主な特徴と機能は以下の通りです：

1. **証明書の生成と署名**: CFSSLは、自己署名証明書やCA（証明書認証局）が発行する証明書の生成と署名を行うための機能を提供します。

2. **PKIの管理**: CFSSLは、PKIのキーペア、CSR（Certificate Signing Request）、証明書を管理するためのツールを提供します。これにより、証明書の有効期限の管理や証明書の失効などを行うことができます。

3. **自動化**: CFSSLはコマンドラインツールとして利用可能で、証明書の生成や署名を自動化するためにスクリプトやツールと統合できます。

4. **JSON形式の設定**: 証明書の生成や設定はJSON形式の設定ファイルを使用して行います。これにより、証明書の生成プロセスを細かく制御することができます。

5. **OCSP（Online Certificate Status Protocol）**: CFSSLはOCSPの実装も提供しており、証明書の有効性を確認するためのステータスを提供します。

CFSSLは、特にクラウドインフラストラクチャやセキュアな通信を必要とする環境で利用されることがあります。証明書の発行や管理を容易にすることで、セキュリティの向上と証明書の効率的な運用を支援します。
```

- [4] 暗号化・署名・認証のためのX.509証明書

- [3] 暗号化ファイルシステム

Q. ecryptfsd
A.
```
"ecryptfsd" は、eCryptfs（Enterprise Cryptographic Filesystem）と呼ばれる暗号化ファイルシステムのデーモン（サービス）です。eCryptfsは、Linuxシステム上でファイルやディレクトリを暗号化して保護するために使用される技術です。eCryptfsはユーザーレベルで動作し、データを暗号化して保存するため、ファイルシステム全体を暗号化するよりも柔軟性があります。

"ecryptfsd" は、eCryptfsのカーネルモジュールとユーザースペースのユーティリティと連携して、eCryptfsを使用したファイルシステムの暗号化と復号を行うためのデーモンです。eCryptfsには、ファイルやディレクトリを選択して暗号化する機能が含まれています。ユーザーのデータを保護しつつ、ファイルシステムのパフォーマンスへの影響を最小限に抑えることができます。

eCryptfsは、ユーザーレベルのファイル暗号化ソリューションとして、プライベートなデータを保護するために使用されることがあります。個々のファイルやディレクトリを暗号化するため、センシティブな情報を含むファイルを選択的に保護するのに役立ちます。ただし、eCryptfsは特定のファイルやディレクトリに対する暗号化を行うためのユーザーレベルのソリューションであり、ファイルシステム全体の暗号化とは異なります。
```

Q. LUKS2
A.
```
LUKS（Linux Unified Key Setup）は、Linuxシステム上でディスクやパーティションの暗号化を実現するための仕組みであり、バージョン2は「LUKS2」と呼ばれています。LUKS2は、ディスク暗号化をサポートするためのフレームワークであり、ユーザーが暗号化されたボリュームを作成し、管理するのに役立ちます。

LUKS2の主な機能と特徴は以下の通りです：

1. **ディスク暗号化**: LUKS2は、ディスク上のデータを暗号化するために使用されます。データは暗号化されて保存されるため、物理的なアクセスやデータの盗難からデータを保護するのに役立ちます。

2. **複数のキーとスロット**: LUKS2は複数のキー（パスフレーズ、キーファイル、トークンなど）をサポートしています。また、スロットと呼ばれる複数のキーの保存場所を使用することで、キーの管理と切り替えが容易になります。

3. **ストレッチキー**: パスフレーズやキーを暗号学的に派生させるためのストレッチングアルゴリズムをサポートしています。これにより、パスワードの強度を向上させます。

4. **ヘッダバックアップ**: LUKS2はヘッダバックアップを提供し、ヘッダデータの破損や喪失からデータを保護します。

5. **データ構造の改善**: LUKS2はLUKS1よりも強化されたデータ構造を使用し、ヘッダとメタデータを改善しています。

6. **AES-XTS暗号モードのサポート**: LUKS2は、AES-XTS暗号モードを使用してデータを暗号化します。AES-XTSはディスク暗号化に適した暗号モードで、セキュリティとパフォーマンスのバランスを取っています。

LUKS2は、Linuxシステム上でディスク暗号化を実装するための柔軟な方法を提供するため、セキュアなデータ保護を実現する上で重要なツールです。ただし、適切なキー管理やセキュリティポリシーの実施が必要です。
```

Q. Clevis
A.
```
Clevisは、ディスク暗号化をシンプルかつ自動化された方法で行うためのツールおよびフレームワークです。Clevisは、Red Hatが開発したオープンソースのプロジェクトであり、ディスク暗号化におけるキー管理の簡素化とセキュリティの向上を目指しています。

Clevisは、ディスク暗号化キーを外部のセキュアな場所に保存し、それを適切なトークン（「ピン」と呼ばれる）を使用して解除するために使用されます。これにより、ユーザーのインタラクションを最小限に抑えつつ、ディスク暗号化のセキュリティを向上させることができます。

主なClevisの機能と特徴は以下の通りです：

1. **トークンベースの解除**: Clevisは、トークンを使用してディスク暗号化を解除します。このトークンは安全なストレージやハードウェアセキュリティモジュール（HSM）に格納されることがあります。

2. **自動化**: Clevisはディスクの自動アンロックをサポートしており、起動時や再起動時にユーザーの介入なしで自動的にディスクのアンロックが行われます。

3. **複数のトークンのサポート**: Clevisは複数のトークンをサポートし、例えばTPM（Trusted Platform Module）やTPM2、LUKS（Linux Unified Key Setup）、USBデバイスなどのトークンと統合できます。

4. **カスタマイズ可能な設定**: Clevisの設定は柔軟で、ユーザーが特定のセキュリティポリシーや要件に合わせて調整できます。

5. **JSONプロトコル**: Clevisはトークンの受け渡しにJSONを使用し、異なるデバイスやツール間での統合が容易です。

Clevisは、特にクラウド環境や自動化された展開でディスク暗号化を使用する場合に便利です。トークンベースの解除により、キーの管理をセキュアに行いつつ、ディスク暗号化の手間を軽減することができます。
```

Q. TPM2
A.
```
TPM2（Trusted Platform Module 2.0）は、セキュリティを強化し、信頼性の高いプラットフォームを提供するための仕組みです。TPM2は、ハードウェアセキュリティモジュール（HSM）の一種であり、コンピューターシステムのセキュリティを向上させるために使用されます。

TPM2の主な機能と特徴は以下の通りです：

1. **鍵の生成と保護**: TPM2は、強力な暗号鍵の生成、保存、および保護を提供します。秘密鍵はTPM内部に保存され、外部からのアクセスが制御されます。

2. **リモート起動の検証**: TPM2は、プラットフォームのブートプロセスが正当な状態で行われていることを検証するための機能を提供します。これにより、信頼性の高いリモート起動が可能になります。

3. **署名と認証**: TPM2は、デジタル署名と認証をサポートし、安全な通信やデータの交換を確保します。

4. **データの暗号化**: TPM2は、データの暗号化と復号を行うための機能を提供し、データの保護を強化します。

5. **プラットフォームの信頼性**: TPM2は、プラットフォーム全体の信頼性を向上させるために使用されます。システム内のソフトウェアやハードウェアの変更を検出し、不正な変更を防ぐ役割を果たします。

6. **セキュアブート**: TPM2はセキュアブートをサポートし、信頼性のあるブートプロセスを確保してマルウェアや不正アクセスから保護します。

7. **セキュリティコピー**: TPM2は、データのセキュアなコピーを提供し、コピー元とコピー先の間でデータが改変されていないことを検証します。

TPM2は、特にセキュリティが重要なエンタープライズ環境やクラウド環境で使用されます。ハードウェアのトラストアンカーとして機能し、プラットフォーム全体のセキュリティを強化するのに役立ちます。
```

Q. NBDE(Network Bound Disk Encryption)/Tang
A.
```
NBDE（Network Bound Disk Encryption）は、ディスク暗号化の一種であり、ネットワークベースの信頼されたサービスを使用してディスクの暗号化鍵を管理するアプローチです。NBDEは、ディスクの暗号化鍵をユーザーの認証やセキュリティトークンではなく、ネットワーク上の信頼されたサービスに依存する方法です。

Tangは、NBDEのための信頼されたサービスの一例です。Tangは、Red Hatが提供するオープンソースのプロジェクトで、ディスク暗号化の鍵管理を支援するために使用されます。Tangは、暗号化キーをネットワークを介してディスクに提供するための仕組みを提供し、セキュアなディスク暗号化の実現を目指しています。

Tangの主な特徴と機能は以下の通りです：

1. **ネットワークベースの鍵の提供**: Tangはネットワークを介して暗号化鍵を提供するため、ディスクが解除されるためにユーザーの認証やキーファイルを必要としません。

2. **透過的なディスク暗号化**: Tangを使用することで、ユーザーはディスクの暗号化および復号を行う必要がなくなり、操作の容易さとセキュリティの向上が期待されます。

3. **セキュリティと信頼性**: Tangはディスク暗号化鍵を安全に提供するためのセキュリティプロトコルを使用し、ユーザーのデータ保護を強化します。

4. **スケーラビリティ**: Tangはスケーラブルな設計を持ち、大規模な環境でも適切に運用することができます。

NBDEとTangの組み合わせは、セキュアなディスク暗号化の実現において、ユーザーの利便性とセキュリティの両方を考慮したアプローチです。
```

- [5] DNSと暗号化
Q. CAA
A.
```
CAA（Certificate Authority Authorization）は、DNSレコードの一種であり、特定のドメインで使用できるSSL/TLS証明書の発行を許可する証明書認証局（CA）を指定するための仕組みです。CAAレコードを使用することで、ドメインの所有者は証明書の発行を特定のCAに制限することができ、証明書の不正な発行を防ぐことができます。

CAAレコードの主な目的は、以下の2つのセキュリティ上の利点を提供することです：

1. **証明書の不正な発行を防止**: CAAレコードを設定することで、ドメインの所有者は特定のCAに限定して証明書を発行できるように制御できます。これにより、誤って不正なCAに証明書を発行されるリスクを低減します。

2. **CAの選択肢を管理**: CAAレコードを使用することで、ドメインの所有者は信頼するCAのリストを定義できます。これにより、ドメインに関連する証明書認証局を明示的に管理することが可能です。

CAAレコードは、ドメインのDNSゾーンに設定されます。例えば、以下のような形式で指定されます。

```
example.com. IN CAA 0 issue "letsencrypt.org"
```

上記の例では、`example.com` ドメインに関して、証明書の発行を「letsencrypt.org」に制限しています。

しかし、注意が必要な点として、CAAレコードが全ての証明書認証局に対して100％確実に適用されるわけではないことです。一部の不正確なCAがCAAレコードを無視して証明書を発行する可能性があります。CAAは追加のセキュリティ層を提供するものであり、証明書の発行を防ぐために単独で依存すべきものではありません。
```

Q. DNS over TLS
A.
```
DNS over TLS（DoT）は、DNS（Domain Name System）トラフィックを保護するための暗号化プロトコルです。通常、DNSはテキストベースのプロトコルであり、ネットワーク上を平文で送信されるため、盗聴や改竄のリスクがあります。DNS over TLSは、このようなセキュリティ上の懸念を低減するために開発されました。

DNS over TLSの主な特徴は以下の通りです：

1. **暗号化された通信**: DNS over TLSは、DNSトラフィックを暗号化するためにTransport Layer Security（TLS）プロトコルを使用します。これにより、第三者が通信内容を読み取ることが難しくなります。

2. **プライバシーの保護**: 通常のDNSクエリは平文で送信されるため、ISPやネットワーク管理者などがユーザーのDNSクエリ履歴を容易に監視できます。DNS over TLSを使用することで、ユーザーのプライバシーを向上させることができます。

3. **改竄の防止**: DNS over TLSは暗号化を使用するため、通信内容が改竄されても検知される可能性が高くなります。DNSトラフィックが改竄された場合、ユーザーは正当な情報源からの応答を受け取ることができます。

4. **信頼性の向上**: TLSは認証と信頼性の確保をサポートするため、偽装されたDNSサーバーからの応答を受け取るリスクを低減します。

5. **ドメインネームの隠蔽**: DoTを使用すると、ISPなどがユーザーのDNSクエリを監視してどのサイトにアクセスしているかを知ることが難しくなるため、ユーザーのウェブ閲覧履歴の隠蔽にも役立ちます。

DNS over TLSは、ユーザーの通信のセキュリティとプライバシーを向上させるための重要なツールです。一部のブラウザやオペレーティングシステムは、デフォルトでDNS over TLSをサポートしており、ユーザーはセキュリティとプライバシーの強化を容易に実現できます。
```

Q. DNS over HTTPS
A.
```
DNS over HTTPS（DoH）は、DNS（Domain Name System）トラフィックをHTTP（Hypertext Transfer Protocol）を介して暗号化して送信するプロトコルです。DoHは、DNSトラフィックを通信の中間に存在する潜在的な監視者から保護し、プライバシーとセキュリティを向上させるために開発されました。

DoHの主な特徴は以下の通りです：

1. **暗号化された通信**: DoHは、DNSクエリと応答をHTTPSプロトコルで暗号化します。これにより、通信が傍受や監視から保護されます。

2. **HTTPSのセキュリティ利点**: DoHは、HTTPSプロトコルのセキュリティメカニズムを利用します。これにはサーバー認証、データの完全性の保護、トランスポート層のセキュリティなどが含まれます。

3. **プライバシーの保護**: 通常のDNSトラフィックは平文で送信され、ネットワーク管理者やISPがユーザーのクエリ情報を簡単に監視できます。DoHを使用することで、ユーザーのプライバシーが保護され、クエリ情報の漏洩を防ぐことができます。

4. **ファイアウォールの回避**: 一部のネットワーク環境では、DNSトラフィックが特定のポート以外を使用することが制限されることがあります。DoHはHTTPSポート（443）を使用するため、これらの制限を回避できることがあります。

5. **透過的な実装**: ユーザーはブラウザやアプリケーションの設定を変更せずに、DoHを利用することができます。多くのブラウザやオペレーティングシステムは、既にDoHをサポートしています。

DoHは、特に公共のWi-Fiネットワークやセキュリティが重要な環境でユーザーのプライバシーとセキュリティを強化するために役立ちます。しかし、DoHがDNSセキュリティ拡張（DNSSEC）との組み合わせで使用される場合、注意が必要です。
```

Q. マルチキャストDNS
A.
```
マルチキャストDNS（Multicast DNS、mDNS）は、ネットワーク内でのデバイスの自己発見とホスト名の解決を行うためのプロトコルです。mDNSは、特に小規模なネットワーク内で便利な仕組みであり、デバイスやサービスが動的にネットワーク上で発見され、識別されることを可能にします。

mDNSは、一般的なDNS（Domain Name System）とは異なり、中央集中型のDNSサーバーを必要とせず、デバイス間で直接通信を行います。主な特徴としては以下の点が挙げられます：

1. **自己発見**: mDNSをサポートするデバイスは、自動的にネットワーク内で他のデバイスを探し、同じネットワークセグメントに存在するデバイスやサービスを自己発見します。これにより、ユーザーは手動でIPアドレスやホスト名を設定する必要がなくなります。

2. **ホスト名の解決**: mDNSを使用することで、ホスト名を使用してデバイスにアクセスすることができます。IPアドレスの代わりにわかりやすいホスト名を使用することで、ユーザーエクスペリエンスが向上します。

3. **.localドメイン**: mDNSは通常、.localトップレベルドメインを使用します。例えば、`device.local`のような名前でデバイスを特定します。

4. **Zero Configuration Networking**: mDNSはZero Configuration Networking（Zeroconf）の一部として、ネットワーク内でのデバイスの設定や通信を容易にします。これにより、ユーザーは複雑なネットワーク設定を行う必要がありません。

mDNSは、ホームネットワークや小規模なオフィス環境など、ネットワーク規模が限られている場所で特に有用です。デバイスの自己発見やホスト名の解決を簡素化するため、ユーザーが手間をかけずにネットワーク内でデバイスを見つけたりアクセスしたりできるようになります。
```


